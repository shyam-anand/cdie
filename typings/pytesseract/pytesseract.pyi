"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import List, Optional

tesseract_cmd = ...
numpy_installed = ...
pandas_installed = ...
LOGGER = ...
DEFAULT_ENCODING = ...
LANG_PATTERN = ...
RGB_MODE = ...
SUPPORTED_FORMATS = ...
OSD_KEYS = ...
EXTENTION_TO_CONFIG = ...
TESSERACT_MIN_VERSION = ...
TESSERACT_ALTO_VERSION = ...

class Output:
    BYTES = ...
    DATAFRAME = ...
    DICT = ...
    STRING = ...

class PandasNotSupported(EnvironmentError):
    def __init__(self) -> None: ...

class TesseractError(RuntimeError):
    def __init__(self, status, message) -> None: ...

class TesseractNotFoundError(EnvironmentError):
    def __init__(self) -> None: ...

class TSVNotSupported(EnvironmentError):
    def __init__(self) -> None: ...

class ALTONotSupported(EnvironmentError):
    def __init__(self) -> None: ...

def kill(process, code):  # -> None:
    ...
@contextmanager
def timeout_manager(proc, seconds=...):  # -> Generator[Any, Any, None]:
    ...
def run_once(func):  # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    ...
def get_errors(error_string):  # -> LiteralString:
    ...
def cleanup(temp_name):  # -> None:
    """Tries to remove temp files by filename wildcard path."""
    ...

def prepare(image):  # -> tuple[Image, str]:
    ...
@contextmanager
def save(image):  # -> Generator[tuple[str, str], Any, None]:
    ...
def subprocess_args(include_stdout=...):  # -> dict[str, int | _Environ[str] | None]:
    ...
def run_tesseract(
    input_filename,
    output_filename_base,
    extension,
    lang,
    config=...,
    nice=...,
    timeout=...,
):  # -> None:
    ...
def run_and_get_multiple_output(
    image,
    extensions: List[str],
    lang: Optional[str] = ...,
    nice: int = ...,
    timeout: int = ...,
    return_bytes: bool = ...,
):  # -> list[bytes | str]:
    ...
def run_and_get_output(
    image, extension=..., lang=..., config=..., nice=..., timeout=..., return_bytes=...
):  # -> bytes | str:
    ...
def file_to_dict(tsv, cell_delimiter, str_col_idx):  # -> dict[Any, Any]:
    ...
def is_valid(val, _type):  # -> bool:
    ...
def osd_to_dict(osd):  # -> dict[str, float | int | str]:
    ...
@run_once
def get_languages(config=...):  # -> list[Any]:
    ...
@run_once
def get_tesseract_version():  # -> Version:
    """
    Returns Version object of the Tesseract version
    """
    ...

def image_to_string(
    image, lang=..., config=..., nice=..., output_type=..., timeout=...
):  # -> bytes | str | dict[str, bytes | str]:
    """
    Returns the result of a Tesseract OCR run on the provided image to string
    """
    ...

def image_to_pdf_or_hocr(
    image, lang=..., config=..., nice=..., extension=..., timeout=...
):  # -> bytes | str:
    """
    Returns the result of a Tesseract OCR run on the provided image to pdf/hocr
    """
    ...

def image_to_alto_xml(
    image, lang=..., config=..., nice=..., timeout=...
):  # -> bytes | str:
    """
    Returns the result of a Tesseract OCR run on the provided image to ALTO XML
    """
    ...

def image_to_boxes(
    image, lang=..., config=..., nice=..., output_type=..., timeout=...
):  # -> bytes | str | dict[Any, Any]:
    """
    Returns string containing recognized characters and their box boundaries
    """
    ...

def get_pandas_output(args, config=...): ...
def image_to_data(
    image,
    lang=...,
    config=...,
    nice=...,
    output_type=...,
    timeout=...,
    pandas_config=...,
):  # -> bytes | str | dict[Any, Any]:
    """
    Returns string containing box boundaries, confidences,
    and other information. Requires Tesseract 3.05+
    """
    ...

def image_to_osd(
    image, lang=..., config=..., nice=..., output_type=..., timeout=...
):  # -> bytes | str | dict[str, float | int | str]:
    """
    Returns string containing the orientation and script detection (OSD)
    """
    ...

def main():  # -> Literal[2, 1] | None:
    ...

if __name__ == "__main__": ...
