"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import (
    TYPE_CHECKING,
    Callable,
    Iterable,
    Iterator,
    Literal,
    TypeVar,
    overload,
)

from docling.datamodel.base_models import InputFormat
from docling.document_converter import FormatOption
from docling_core.types.doc.document import DoclingDocument
from pandas import DataFrame
from spacy.language import Language
from spacy.tokens import Doc, Span

from .types import PageLayout

if TYPE_CHECKING: ...
_AnyContext = TypeVar("_AnyContext")
TABLE_PLACEHOLDER = ...
TABLE_ITEM_LABELS = ...

class spaCyLayout:
    def __init__(
        self,
        nlp: Language,
        separator: str | None = ...,
        attrs: dict[str, str] = ...,
        headings: list[str] = ...,
        display_table: Callable[[DataFrame], str] | str = ...,
        docling_options: dict[InputFormat, FormatOption] | None = ...,
    ) -> None:
        """Initialize the layout parser and Docling converter."""
        ...

    def __call__(self, source: str | Path | bytes | DoclingDocument) -> Doc:
        """Call parser on a path to create a spaCy Doc object."""
        ...

    @overload
    def pipe(
        self, sources: Iterable[str | Path | bytes], as_tuples: Literal[False] = ...
    ) -> Iterator[Doc]: ...
    @overload
    def pipe(
        self,
        sources: Iterable[tuple[str | Path | bytes, _AnyContext]],
        as_tuples: Literal[True] = ...,
    ) -> Iterator[tuple[Doc, _AnyContext]]: ...
    def pipe(
        self,
        sources: (
            Iterable[str | Path | bytes]
            | Iterable[tuple[str | Path | bytes, _AnyContext]]
        ),
        as_tuples: bool = ...,
    ) -> Iterator[Doc] | Iterator[tuple[Doc, _AnyContext]]:
        """Process multiple documents and create spaCy Doc objects."""
        ...

    def get_pages(self, doc: Doc) -> list[tuple[PageLayout, list[Span]]]:
        """Get all pages and their layout spans."""
        ...

    def get_heading(self, span: Span) -> Span | None:
        """Get the closest heading for a span."""
        ...

    def get_tables(self, doc: Doc) -> list[Span]:
        """Get all tables in the document."""
        ...
